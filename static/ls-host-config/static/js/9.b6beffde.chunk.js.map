{"version":3,"sources":["lib/AxiosClient.js","lib/uuid.js","app/view/BleMeshDetailsConfig.js"],"names":["AxiosClient","axios","create","baseURL","timeout","headers","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","RtspSourceType","CameraManufacture","HomeUrlPrefix","BleMeshDetailsConfig","query","search","useLocation","React","useMemo","URLSearchParams","useQuery","useState","setUserId","setId","setGatewayId","setName","useEffect","bsCustomFileInput","init","setTimeout","get","className"],"mappings":"kIAAA,aAEMA,EAFN,OAEoBC,EAAMC,OAAO,CAE7BC,QAAS,wCACTC,QAAS,IACTC,QAAS,CAAE,WAAY,sBAaZL,O,iCClBf,sCAAMM,EAAS,WACX,OAAQ,CAAC,MAAQ,KAAO,KAAO,KAAO,MAAMC,QAAQ,UAAU,SAAAC,GAAC,OAC1DA,EAAIC,OAAOC,gBAAgB,IAAIC,WAAW,IAAI,GAAK,IAAMH,EAAI,GAAGI,SAAS,S,gKCYlF,IAAMC,EACa,EAIbC,EACS,EA4BGC,cACH,SAASC,IACpB,IAAMC,EAzCV,WACI,IAAQC,EAAWC,cAAXD,OACR,OAAOE,IAAMC,SAAQ,kBAAM,IAAIC,gBAAgBJ,KAAS,CAACA,IAuC3CK,GAEd,EAA4BC,mBAAS,IAArC,mBAAeC,GAAf,WAEA,EAAoBD,mBAAS,IAA7B,mBAAWE,GAAX,WACA,EAAkCF,mBAAS,IAA3C,mBAAkBG,GAAlB,WACA,EAAwBH,mBAAS,IAAjC,mBAAaI,GAAb,WAEA,EAA8CJ,mBAAS,KAAvD,mBACA,GADA,UAC8DA,mBAAS,KAAvE,mBACA,GADA,UAC8CA,mBAAS,KAAvD,mBACA,GADA,UAC8CA,mBAAS,IAAvD,mBACA,GADA,UACgEA,oBAAS,IAAzE,mBAEA,GAFA,UAE4BA,mBAAS,KAArC,mBACA,GADA,UAC4CA,mBAAS,KAArD,mBACA,GADA,UACwBA,mBAAS,kBAAjC,mBACA,GADA,UACsBA,mBAAS,4BAA/B,mBAEA,GAFA,UAE4CA,mBAASX,IAArD,mBACA,GADA,UACkDW,mBAASV,IAA3D,mBACA,GADA,UAC8CU,mBAAS,kBAAvD,mBACA,GADA,UAC8CA,mBAAS,KAAvD,mBACA,GADA,UACwCA,mBAAS,UAAjD,mBACA,GADA,UACwCA,mBAAS,aAAjD,mBACA,GADA,UACwCA,mBAAS,KAAjD,mBACA,GADA,UACgCA,mBAAS,KAAzC,oBACA,IADA,YAC4CA,mBAAS,KAArD,qBACA,IADA,YAC4CA,mBAAS,KAArD,iCA8PA,OAVAK,qBAAU,WACNC,IAAkBC,OAClBC,YAAW,WACPN,EAAMT,EAAMgB,IAAI,OAChBN,EAAaV,EAAMgB,IAAI,eACvBL,EAAQX,EAAMgB,IAAI,SAClBR,EAAU,yBAA2BnB,iBACtC,QAIH,6BACI,yBAAK4B,UAAU,eACX,wBAAIA,UAAU,cAAd,yCAQJ,yBAAKA,UAAU","file":"static/js/9.b6beffde.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst AxiosClient = axios.create({\n    //baseURL: 'http://192.168.0.54:3000/api/',\n    baseURL: 'http://www.lengshuotech.com:3000/api/',\n    timeout: 10000,\n    headers: { 'ls-token': '1234567890abcdef' }\n});\n\n//- or after instance has been created\n// AxiosClient.defaults.headers.post['header1'] = 'value'\n\n//- or before a request is made\n// using Interceptors\n// AxiosClient.interceptors.request.use(config => {\n//   config.headers.post['header1'] = 'value';\n//   return config;\n// });\n\nexport default AxiosClient;","\nconst uuidv4 = () => {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n};\n\nexport { uuidv4 };","import React, { useEffect, useState } from 'react';\nimport {\n    useLocation, Link\n} from \"react-router-dom\";\nimport HomeUrlPrefix from '../HomeUrlPrefix';\nimport { Form } from 'react-bootstrap';\nimport bsCustomFileInput from 'bs-custom-file-input';\nimport AxiosClient from '../../lib/AxiosClient';\nimport { uuidv4 } from '../../lib/uuid';\n\nfunction useQuery() {\n    const { search } = useLocation();\n    return React.useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst RtspSourceType = {\n    VideoRecorder: 0,\n    DirectCamera: 1,\n};\n\nconst CameraManufacture = {\n    HikVision: 0,\n    Dahua: 1,\n};\n\nconst rtspSrcTypeToText = type => {\n    if (type === RtspSourceType.VideoRecorder) {\n        return 'recorder';\n    }\n    else if (type === RtspSourceType.VideoRecorder) {\n        return 'camera';\n    }\n    else {\n        return '';\n    }\n};\n\nconst cameraManufactureToText = manufacture => {\n    if (manufacture === CameraManufacture.HikVision) {\n        return 'hkvision';\n    }\n    else if (manufacture === CameraManufacture.Dahua) {\n        return 'dahua';\n    }\n    else {\n        return '';\n    }\n};\n\nconst urlPrefix = HomeUrlPrefix();\nexport default function BleMeshDetailsConfig() {\n    const query = useQuery();\n\n    const [userId, setUserId] = useState('');\n\n    const [id, setId] = useState('');\n    const [gatewayId, setGatewayId] = useState('');\n    const [name, setName] = useState('');\n\n    const [timeShieldCmdMS, setTimeShieldCmdMS] = useState(500);\n    const [timeIntervalDataReportS, setTimeIntervalDataReportS] = useState(10);\n    const [dataLogKeepDays, setDataLogKeepDays] = useState(10);\n    const [mqttLogKeepDays, setMqttLogKeepDays] = useState(7);\n    const [autoRebootWhenGatewayOff, setAutoRebootWhenGatewayOff] = useState(true);\n\n    const [hostIP, setHostIP] = useState('');\n    const [defaultGateway, setDefaultGateway] = useState('');\n    const [mask, setMask] = useState('255.255.255.0');\n    const [dns, setDns] = useState('114.114.114.114,8.8.8.8');\n\n    const [rtspSourceType, setRtspSourceType] = useState(RtspSourceType.VideoRecorder);\n    const [cameraManufacture, setCameraManufacture] = useState(CameraManufacture.HikVision);\n    const [channelIDPrefix, setChannelIDPrefix] = useState('jiulong_scene');\n    const [videoRecorderIP, setVideoRecorderIP] = useState('');\n    const [rtspUserName, setRtspUserName] = useState('admin');\n    const [rtspPassword, setRtspPassword] = useState('admin123');\n    const [rtspChannels, setRtspChannels] = useState('');\n    const [cameraIP, setCameraIP] = useState('');\n    const [cameraUserName, setCameraUserName] = useState('');\n    const [cameraPassword, setCameraPassword] = useState('');\n\n    const handleTimeShieldCmdMSChange = event => {\n        setTimeShieldCmdMS(parseInt(event.target.value));\n    };\n\n    const handleTimeIntervalDataReportSChange = event => {\n        setTimeIntervalDataReportS(parseInt(event.target.value));\n    };\n\n    const handleDataLogKeepDaysChange = event => {\n        setDataLogKeepDays(parseInt(event.target.value));\n    };\n\n    const handleMqttLogKeepDaysChange = event => {\n        setMqttLogKeepDays(parseInt(event.target.value));\n    };\n\n    const handleAutoRebootWhenGatewayOffChange = event => {\n        console.log('AutoRebootWhenGatewayOff: prev', autoRebootWhenGatewayOff);\n        setAutoRebootWhenGatewayOff(event.target.checked);\n    };\n\n    const handlehostIPChange = event => {\n        setHostIP(event.target.value);\n    };\n\n    const handleDefaultGatewayChange = event => {\n        setDefaultGateway(event.target.value);\n    };\n\n    const handleMaskChange = event => {\n        setMask(event.target.value);\n    };\n\n    const handleDNSChange = event => {\n        setDns(event.target.value);\n    };\n\n    const handleRtspSourceChange = event => {\n        console.log('RTSP source: ', event.target.value);\n        setRtspSourceType(parseInt(event.target.value));\n    };\n\n    const handleCameraManufactureChange = event => {\n        setCameraManufacture(parseInt(event.target.value));\n    };\n\n    const handleChannelIDPrefixChange = event => {\n        setChannelIDPrefix(event.target.value);\n    };\n\n    const handleVideoRecorderIPChange = event => {\n        setVideoRecorderIP(event.target.value);\n    };\n\n    const handleRtspUserNameChange = event => {\n        setRtspUserName(event.target.value);\n    };\n\n    const handleRtspPasswordChange = event => {\n        setRtspPassword(event.target.value);\n    };\n\n    const handleRtspChannelsChange = event => {\n        setRtspChannels(event.target.value);\n    };\n\n    const handleCameraIPChange = event => {\n        setCameraIP(event.target.value);\n    };\n\n    const handleCameraUserNameChange = event => {\n        setCameraUserName(event.target.value);\n    };\n\n    const handleCameraPasswordChange = event => {\n        setCameraPassword(event.target.value);\n    };\n\n    const handleApplyBleConfig = () => {\n        //TODO: MQTT publish /host/cmd/xxxxxxxxxxxx-yyyyyy\n        /*\n        {\n            cmd: 'set',\n            category: 'ble',\n            params: {\n                port: '/dev/ttyUSB0',\n                autoRebootWhenGatewayOff: true,\n                commandShieldTimeMS: 3000,\n                dataReportIntervalMS: 1000,\n                dataLogKeepDays: 7,\n                mqttLogKeepDays: 10,\n                gateway_id: 200,\n                gateway_mesh_name: 'JLZN',\n                gateway_mesh_password: '1qaz',\n            }\n        }\n        */\n    };\n\n    const handleApplyNetworkConfig = () => {\n        //TODO: MQTT publish /host/cmd/xxxxxxxxxxxx-yyyyyy\n        /*\n        {\n            cmd: 'set',\n            category: 'network',\n            params: {\n                method: 'static'，\n                ip: 'xxx.xxx.xxx.xxx',\n                mask: '255.244.255.0',\n                gateway: '192.168.1.1',\n                dns: '114.114.114.114,8.8.8.8'\n            }\n        } Or\n        {\n            method: 'dhcp'\n        }\n        */\n\n        if (hostIP === '' || defaultGateway === '') {\n            alert('请输入要配的IP和网关！');\n            return;\n        }\n\n        let cmdData = {\n            user_id: userId,\n            gateway_id: gatewayId,\n            cmd: 'set',\n            category: 'network',\n            params: {\n                method: 'static',\n                ip: hostIP,\n                mask: mask,\n                gateway: defaultGateway,\n                dns: dns\n            }\n        };\n\n        console.log('Trying to save network settings: ', cmdData);\n        AxiosClient.post(`/v1/scenes/${id}`, cmdData).then(resp => {\n            console.log(resp);\n\n            let respData = resp.data;\n            if (respData.state === 0) {\n                alert('设置网络成功');\n            }\n            else {\n                alert('设置网络失败: ' + respData.message);\n            }\n        })\n            .catch(error => {\n                alert('设置网络失败: ' + error.message);\n            });\n    };\n\n    const handleApplyVideoConfig = () => {\n        //TODO: MQTT publish /host/cmd/xxxxxxxxxxx-yyyyyy\n        /*\n        {\n            cmd: 'set',\n            category: 'video',\n            params: {\n                rtsp_src: 'recorder',\n                vendor: 'hkvision',\n                id_prefix: 'hangzhou_liuzhong',\n                recorder_ip: 'xxx.xxx.xxx.xxx',\n                user_name: 'admin',\n                password: 'admin123',\n                channels: '1-5, 8, 11-12',\n            } or\n            params: {\n                rtsp_src: 'camera',\n                vendor: 'hkvision',\n                id_prefix: 'hangzhou_liuzhong',\n                camera_ip: 'xxx.xxx.xxx.xxx',\n                user_name: 'admin',\n                password: 'admin123'\n            }\n        }\n        */\n       if (rtspSourceType === RtspSourceType.VideoRecorder)\n       {\n        if (channelIDPrefix === '' || rtspChannels === '') {\n            alert('请输入通道ID前缀和通道号！');\n            return;\n        }\n\n        if (rtspUserName === '' || rtspPassword === '') {\n            alert('请输入录像机用户名和密码！');\n            return;\n        }\n\n        if (videoRecorderIP == '') {\n            alert('请输入录像机IP！');\n            return;\n        }\n       }\n       else {\n        if (cameraIP == '') {\n            alert('请输入摄像头IP！');\n            return;\n        }\n\n        if (cameraUserName === '' || cameraPassword === '') {\n            alert('请输入摄像头用户名和密码！');\n            return;\n        }\n       }\n\n        let cmdData = {\n            user_id: userId,\n            gateway_id: gatewayId,\n            cmd: 'set',\n            category: 'video',\n            params: {\n                rtsp_src: rtspSrcTypeToText(rtspSourceType),\n                vendor: cameraManufactureToText(cameraManufacture),\n                id_prefix: channelIDPrefix,\n                recorder_ip: videoRecorderIP,\n                camera_ip: cameraIP,\n                user_name: (rtspSourceType === RtspSourceType.VideoRecorder) ? rtspUserName : cameraUserName,\n                password: (rtspSourceType === RtspSourceType.VideoRecorder) ? rtspPassword : cameraPassword,\n                channels: (rtspSourceType === RtspSourceType.VideoRecorder) ? rtspChannels : '',\n            }\n        };\n\n        console.log('Trying to save video settings: ', cmdData);\n        AxiosClient.post(`/v1/scenes/${id}`, cmdData).then(resp => {\n            console.log(resp);\n\n            let respData = resp.data;\n            if (respData.state === 0) {\n                alert('添加视频通道成功');\n            }\n            else {\n                alert('添加视频通道失败: ' + respData.message);\n            }\n        })\n            .catch(error => {\n                alert('添加视频通道失败: ' + error.message);\n            });\n    };\n\n    useEffect(() => {\n        bsCustomFileInput.init();\n        setTimeout(() => {\n            setId(query.get('id'));\n            setGatewayId(query.get('gateway_id'));\n            setName(query.get('name'));\n            setUserId('jiulong_data_platform_' + uuidv4());\n        }, 500);\n    });\n\n    return (\n        <div>\n            <div className=\"page-header\">\n                <h3 className=\"page-title\">{`Mesh配置(建设中)`}</h3>\n                {/* <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><Link to={`/${urlPrefix}/scene`}>场地</Link></li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">配置</li>\n                    </ol>\n                </nav> */}\n            </div>\n            <div className=\"row\">\n                {/* <div className=\"col-md-6 grid-margin stretch-card\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h4 className=\"card-title\"><i className=\"mdi mdi-bluetooth-settings\"></i>蓝牙配置</h4>\n                            <form className=\"forms-sample\">\n                                <Form.Group className=\"row\">\n                                    <label htmlFor=\"timeShieldCmdMS\" className=\"col-sm-3 col-form-label\">命令接收间隔(毫秒)</label>\n                                    <div className=\"col-sm-9\">\n                                        <Form.Control type=\"number\" className=\"form-control\" id=\"timeShieldCmdMS\" placeholder=\"250\"\n                                            value={timeShieldCmdMS} onChange={handleTimeShieldCmdMSChange} />\n                                    </div>\n                                </Form.Group>\n                                <Form.Group className=\"row\">\n                                    <label htmlFor=\"timeIntervalDataReportS\" className=\"col-sm-3 col-form-label\">数据上报间隔(秒)</label>\n                                    <div className=\"col-sm-9\">\n                                        <Form.Control type=\"number\" className=\"form-control\" id=\"timeIntervalDataReportS\"\n                                            value={timeIntervalDataReportS} onChange={handleTimeIntervalDataReportSChange} placeholder=\"10\" />\n                                    </div>\n                                </Form.Group>\n                                <Form.Group className=\"row\">\n                                    <label htmlFor=\"dataLogKeepDays\" className=\"col-sm-3 col-form-label\">数据日志缓存时间(天)</label>\n                                    <div className=\"col-sm-9\">\n                                        <Form.Control type=\"number\" className=\"form-control\" id=\"dataLogKeepDays\"\n                                            value={dataLogKeepDays} onChange={handleDataLogKeepDaysChange} placeholder=\"10\" />\n                                    </div>\n                                </Form.Group>\n                                <Form.Group className=\"row\">\n                                    <label htmlFor=\"mqttLogKeepDays\" className=\"col-sm-3 col-form-label\">MQTT日志缓存时间(天)</label>\n                                    <div className=\"col-sm-9\">\n                                        <Form.Control type=\"number\" className=\"form-control\" id=\"mqttLogKeepDays\"\n                                            value={mqttLogKeepDays} onChange={handleMqttLogKeepDaysChange} placeholder=\"7\" />\n                                    </div>\n                                </Form.Group>\n                                <div className=\"form-check\">\n                                    <label className=\"form-check-label\">\n                                        <input type=\"checkbox\" className=\"form-check-input\" checked={autoRebootWhenGatewayOff}\n                                            onChange={handleAutoRebootWhenGatewayOffChange} />\n                                        <i className=\"input-helper\"></i>\n                                        网关断线时自动重启工控机\n                                    </label>\n                                </div>\n                                <button type=\"button\" className=\"btn btn-gradient-primary mr-2\" onClick={handleApplyBleConfig}>确定</button>\n                            </form>\n                        </div>\n                    </div>\n                </div> */}\n            </div>\n        </div>\n    );\n}"],"sourceRoot":""}